---
- name: Install dependencies
  become: yes
  become_user: root
  apt:
    name:
      - curl
    state: present

- name: Copy resources
  ansible.builtin.copy:
    src: ../resources/
    dest: /var/ansible/resources/

# Always fails on the first run
# use set_fact when mounting the NAS
# - name: Sanity check before moving on
#   when: ansible_local["nas"]["source"] == ""
#   shell: exit 1

- name: Deploy local registry
  when: ansible_local["cluster"]["registry"] == ""
  shell: |
    k3d registry create registry.localhost -p 5000
    while ! curl -s http://k3d-registry.localhost:5000/v2/_catalog; do
      sleep 2
    done

- name: Deploy k3d cluster
  when: ansible_local["cluster"]["exists"] != true
  block:
    - name: Deploy cluster
      shell: |
        CLUSTER_NAME="$(hostname -s)-${USER}"
        k3d cluster create \
            ${CLUSTER_NAME} \
            --agents=1 \
            --api-port=$(shuf -i 6000-7000 -n 1) \
            --image=rancher/k3s:latest \
            --k3s-server-arg=--cluster-domain=${CLUSTER_NAME}.local \
            --k3s-server-arg=--tls-san=$(hostname -i | cut -d" " -f1) \
            --k3s-server-arg=--tls-san=$(hostname -f) \
            --kubeconfig-switch-context \
            --kubeconfig-update-default \
            --port=80:80@loadbalancer \
            --port=443:443@loadbalancer \
            --registry-use=k3d-registry.localhost:5000 \
            --servers=1 \
            --timeout=120s \
            --volume /mnt/nas/k3s/storage/persistentvolumes:/mnt/nas \
            --volume /mnt/nas/k3s/storage/storageclasses/local-path:/var/lib/rancher/k3s/storage \
            --wait || exit 1

    - name: Edit kube config to reference the node IP
      ansible.builtin.replace:
        path: "$HOME/.kube/config"
        regexp: https://0.0.0.0
        replace: https://{{ ansible_local.host.ip }}

    - name: Wait for cluster to be fully up and running
      shell: |
        while kubectl get pods --all-namespaces | grep -E -q -v " STATUS | Running | Completed "; do \
        sleep 5 ; \
        done

- name: Deploy automatic cluster upgrade
  when: ansible_local["cluster"]["deploy"]["system-upgrade-controller"] != suc_version
  shell: |
    kubectl apply -f https://github.com/rancher/system-upgrade-controller/releases/download/v{{ suc_version }}/system-upgrade-controller.yaml
